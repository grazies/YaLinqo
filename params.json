{
  "name": "Yalinqo",
  "tagline": "Yet Another LINQ to Objects for PHP [Simplified BSD]",
  "body": "# *YaLinqo: Yet Another LINQ to Objects for PHP*\r\n\r\n[![Travis CI Status](https://img.shields.io/travis/Athari/YaLinqo.svg)](https://travis-ci.org/Athari/YaLinqo)\r\n[![Coveralls Coverage](https://img.shields.io/coveralls/Athari/YaLinqo/master.svg)](https://coveralls.io/r/Athari/YaLinqo)\r\n[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/Athari/YaLinqo.svg)](https://scrutinizer-ci.com/g/Athari/YaLinqo)\r\n[![SensioLabs Insight Check](https://img.shields.io/sensiolabs/i/d1273f86-85e3-4076-a037-a40062906329.svg)](https://insight.sensiolabs.com/projects/d1273f86-85e3-4076-a037-a40062906329)\r\n[![VersionEye Dependencies](https://www.versioneye.com/php/athari:yalinqo/badge.svg)](https://www.versioneye.com/php/athari:yalinqo)<br>\r\n[![Packagist Downloads](https://img.shields.io/packagist/dt/athari/yalinqo.svg)](https://packagist.org/packages/athari/yalinqo)\r\n[![VersionEye References](https://www.versioneye.com/php/athari:yalinqo/reference_badge.svg)](https://www.versioneye.com/php/athari:yalinqo/references)\r\n[![Packagist Version](https://img.shields.io/packagist/v/athari/yalinqo.svg)](https://packagist.org/packages/athari/yalinqo)\r\n[![GitHub License](https://img.shields.io/github/license/Athari/YaLinqo.svg)](license.md)\r\n\r\n* [**Online documentation**](http://athari.github.io/YaLinqo)\r\n* [**GitHub repository**](https://github.com/Athari/YaLinqo)\r\n\r\nFeatures\r\n========\r\n\r\n* The most complete port of .NET 4 LINQ to PHP, with [many additional methods](#implemented-methods).\r\n* Lazy evaluation, error messages and other behavior of original LINQ.\r\n* [Detailed PHPDoc and online reference](http://athari.github.io/YaLinqo) based on PHPDoc for all methods. Articles are adapted from original LINQ documentation from MSDN.\r\n* 100% unit test coverage.\r\n* Best performance among full-featured LINQ ports (YaLinqo, Ginq, Pinq), at least 2x faster than the closest competitor, see [performance tests](https://github.com/Athari/YaLinqoPerf).\r\n* Callback functions can be specified as closures (like `function ($v) { return $v; }`), PHP \"function pointers\" (either strings like `'strnatcmp'` or arrays like `array($object, 'methodName')`), string \"lambdas\" using various syntaxes (`'\"$k = $v\"'`, `'$v ==> $v+1'`, `'($v, $k) ==> $v + $k'`, `'($v, $k) ==> { return $v + $k; }'`).\r\n* Keys are as important as values. Most callback functions receive both values and the keys; transformations can be applied to both values and the keys; keys are never lost during transformations, if possible.\r\n* SPL interfaces `Iterator`, `IteratorAggregate` etc. are used throughout the code and can be used interchangeably with Enumerable.\r\n* Redundant collection classes are avoided, native PHP arrays are used everywhere.\r\n* Composer support ([package](https://packagist.org/packages/athari/yalinqo) on Packagist).\r\n* No external dependencies.\r\n\r\nImplemented methods\r\n===================\r\n\r\nSome methods had to be renamed, because their names are reserved keywords. Original methods names are given in parenthesis.\r\n\r\n* **Generation**: cycle, emptyEnum (empty), from, generate, toInfinity, toNegativeInfinity, matches, returnEnum (return), range, rangeDown, rangeTo, repeat, split;\r\n* **Projection and filtering**: cast, ofType, select, selectMany, where;\r\n* **Ordering**: orderBy, orderByDescending, orderByDir, thenBy, thenByDescending, thenByDir;\r\n* **Joining and grouping**: groupJoin, join, groupBy;\r\n* **Aggregation**: aggregate, aggregateOrDefault, average, count, max, maxBy, min, minBy, sum;\r\n* **Set**: all, any, contains, distinct, except, intersect, union;\r\n* **Pagination**: elementAt, elementAtOrDefault, first, firstOrDefault, firstOrFallback, last, lastOrDefault, lastOrFallback, single, singleOrDefault, singleOrFallback, indexOf, lastIndexOf, findIndex, findLastIndex, skip, skipWhile, take, takeWhile;\r\n* **Conversion**: toArray, toArrayDeep, toList, toListDeep, toDictionary, toJSON, toLookup, toKeys, toValues, toObject, toString;\r\n* **Actions**: call (do), each (forEach), write, writeLine.\r\n\r\nIn total, more than 70 methods.\r\n\r\nExample\r\n=======\r\n\r\n*Process sample data:*\r\n\r\n```php\r\n// Data\r\n$products = array(\r\n    array('name' => 'Keyboard',    'catId' => 'hw', 'quantity' =>  10, 'id' => 1),\r\n    array('name' => 'Mouse',       'catId' => 'hw', 'quantity' =>  20, 'id' => 2),\r\n    array('name' => 'Monitor',     'catId' => 'hw', 'quantity' =>   0, 'id' => 3),\r\n    array('name' => 'Joystick',    'catId' => 'hw', 'quantity' =>  15, 'id' => 4),\r\n    array('name' => 'CPU',         'catId' => 'hw', 'quantity' =>  15, 'id' => 5),\r\n    array('name' => 'Motherboard', 'catId' => 'hw', 'quantity' =>  11, 'id' => 6),\r\n    array('name' => 'Windows',     'catId' => 'os', 'quantity' => 666, 'id' => 7),\r\n    array('name' => 'Linux',       'catId' => 'os', 'quantity' => 666, 'id' => 8),\r\n    array('name' => 'Mac',         'catId' => 'os', 'quantity' => 666, 'id' => 9),\r\n);\r\n$categories = array(\r\n    array('name' => 'Hardware',          'id' => 'hw'),\r\n    array('name' => 'Operating systems', 'id' => 'os'),\r\n);\r\n\r\n// Put products with non-zero quantity into matching categories;\r\n// sort categories by name;\r\n// sort products within categories by quantity descending, then by name.\r\n$result = from($categories)\r\n    ->orderBy('$cat ==> $cat[\"name\"]')\r\n    ->groupJoin(\r\n        from($products)\r\n            ->where('$prod ==> $prod[\"quantity\"] > 0')\r\n            ->orderByDescending('$prod ==> $prod[\"quantity\"]')\r\n            ->thenBy('$prod ==> $prod[\"name\"]'),\r\n        '$cat ==> $cat[\"id\"]', '$prod ==> $prod[\"catId\"]',\r\n        '($cat, $prods) ==> array(\r\n            \"name\" => $cat[\"name\"],\r\n            \"products\" => $prods\r\n        )'\r\n    );\r\n\r\n// Alternative shorter syntax using default variable names\r\n$result2 = from($categories)\r\n    ->orderBy('$v[\"name\"]')\r\n    ->groupJoin(\r\n        from($products)\r\n            ->where('$v[\"quantity\"] > 0')\r\n            ->orderByDescending('$v[\"quantity\"]')\r\n            ->thenBy('$v[\"name\"]'),\r\n        '$v[\"id\"]', '$v[\"catId\"]',\r\n        'array(\r\n            \"name\" => $v[\"name\"],\r\n            \"products\" => $e\r\n        )'\r\n    );\r\n\r\n// Closure syntax, maximum support in IDEs, but verbose and hard to read\r\n$result3 = from($categories)\r\n    ->orderBy(function ($cat) { return $cat['name']; })\r\n    ->groupJoin(\r\n        from($products)\r\n            ->where(function ($prod) { return $prod[\"quantity\"] > 0; })\r\n            ->orderByDescending(function ($prod) { return $prod[\"quantity\"]; })\r\n            ->thenBy(function ($prod) { return $prod[\"name\"]; }),\r\n        function ($cat) { return $cat[\"id\"]; },\r\n        function ($prod) { return $prod[\"catId\"]; },\r\n        function ($cat, $prods) {\r\n            return array(\r\n                \"name\" => $cat[\"name\"],\r\n                \"products\" => $prods\r\n            );\r\n        }\r\n    );\r\n\r\nprint_r($result->toArrayDeep());\r\n```\r\n\r\n*Output (compacted):*\r\n\r\n```\r\nArray (\r\n    [hw] => Array (\r\n        [name] => Hardware\r\n        [products] => Array (\r\n            [0] => Array ( [name] => Mouse       [catId] => hw [quantity] =>  20 [id] => 2 )\r\n            [1] => Array ( [name] => CPU         [catId] => hw [quantity] =>  15 [id] => 5 )\r\n            [2] => Array ( [name] => Joystick    [catId] => hw [quantity] =>  15 [id] => 4 )\r\n            [3] => Array ( [name] => Motherboard [catId] => hw [quantity] =>  11 [id] => 6 )\r\n            [4] => Array ( [name] => Keyboard    [catId] => hw [quantity] =>  10 [id] => 1 )\r\n        )\r\n    )\r\n    [os] => Array (\r\n        [name] => Operating systems\r\n        [products] => Array (\r\n            [0] => Array ( [name] => Linux       [catId] => os [quantity] => 666 [id] => 8 )\r\n            [1] => Array ( [name] => Mac         [catId] => os [quantity] => 666 [id] => 9 )\r\n            [2] => Array ( [name] => Windows     [catId] => os [quantity] => 666 [id] => 7 )\r\n        )\r\n    )\r\n)\r\n```\r\n\r\nRequirements\r\n============\r\n\r\n* Version 1: PHP 5.3 or higher.\r\n* Version 2: PHP 5.5 or higher.\r\n\r\nUsage\r\n=====\r\n\r\nAdd to `composer.json`:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"athari/yalinqo\": \"~2.0\"\r\n    }\r\n}\r\n```\r\n\r\nAdd to your PHP script:\r\n\r\n```php\r\nrequire_once 'vendor/autoloader.php';\r\nuse \\YaLinqo\\Enumerable;\r\n\r\n// 'from' can be called as a static method or via a global function shortcut\r\nEnumerable::from(array(1, 2, 3));\r\nfrom(array(1, 2, 3));\r\n```\r\n\r\nLicense\r\n=======\r\n\r\n#### Simplified BSD License\r\n\r\nCopyright © 2012–2016, Alexander Prokhorov\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright\r\n  notice, this list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright\r\n  notice, this list of conditions and the following disclaimer in the\r\n  documentation and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL ALEXANDER PROKHOROV BE LIABLE FOR ANY\r\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nLinks\r\n=====\r\n\r\n#### YaLinqo\r\n\r\n* **CodeProject** articles *(English):*\r\n  * [LINQ for PHP comparison: YaLinqo, Ginq, Pinq](http://www.codeproject.com/Articles/997238/LINQ-for-PHP-comparison-YaLinqo-Ginq-Pinq) — performance comparison of full-featured LINQ ports, with some additional information.\r\n\r\n* **Habrahabr** articles *(Russian):*\r\n  * [Comparison of old LINQ libraries](http://habrahabr.ru/post/147612/) — comparison of *LINQ for PHP*, *Phinq*, *PHPLinq* and *Plinq*, also *Underscore.php*.\r\n  * [YaLinqo 1.0 with updated comparison](http://habrahabr.ru/post/147848/) — explanation of architecture and design decisions.\r\n  * [YaLinqo 2.0](http://habrahabr.ru/post/229763/) — switch to PHP 5.5 with generators support and related changes.\r\n  * [LINQ for PHP: speed matters](http://habrahabr.ru/post/259155/) — performance comparison of full-featured LINQ ports (YaLinqo, Ginq, Pinq).\r\n\r\n* **Other**:\r\n  * Tute Wall: [How to use Linq in PHP](http://tutewall.com/how-to-use-linq-in-php-part-01/) by *Mr. X* — a series of posts covering basic usage of YaLinqo. \r\n\r\n* Related projects:\r\n  * [**YaLinqoPerf**](https://github.com/Athari/YaLinqoPerf) — collection of performance tests comparing raw PHP, array functions, YaLinqo, YaLinqo with string lambdas, Ginq, Ginq with property accessors, Pinq.\r\n\r\n#### LINQ ported to other languages:\r\n\r\n* [**linq.js**](http://linqjs.codeplex.com/) — LINQ for JavaScript. The one and only complete port of .NET 4 LINQ to JavaScript.\r\n* [**Underscore.js**](http://documentcloud.github.com/underscore/) — library for functional programming in JavaScript. Similar to LINQ, but different method names and no lazy evaluation.\r\n* [**Underscore.php**](http://brianhaveri.github.com/Underscore.php/) — port of Underscore.js to PHP. Identical functionality.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}